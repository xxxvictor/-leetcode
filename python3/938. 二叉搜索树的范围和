1.题目意思
给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。
二叉搜索树保证具有唯一的值。

2.输入输出示例

示例 1：
输入：root = [10,5,15,3,7,null,18], L = 7, R = 15
输出：32

示例 2：
输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
输出：23

3.提示
树中的结点数量最多为 10000 个。
最终的答案保证小于 2^31。

4.解题思路
遍历加递归，每次判断结点的值是否在目标区间内。

5.代码
  class Solution:
      def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
          if root == None:
              return 0
          sum = 0
          if L <= root.val <= R:
              sum += root.val
          # 访问左子树
          if root.val >= L:
              sum += self.rangeSumBST(root.left, L, R)
          # 访问右子树
          if root.val <= R:
              sum += self.rangeSumBST(root.right, L, R)

          return sum
